{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notitfication/Notification.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js","components/Feedback/Feedback.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","styles","counter","label","defaultProps","FeedbackOptions","options","onLeaveFeedback","map","button","type","name","onClick","Section","children","title","Notification","message","show","Feedback","useState","setGood","setNeutral","setBad","countTotalFeedback","feedback","event","target","prevState","Math","round","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"0RAIMA,EAAa,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,mBAC7C,OACI,mCACA,sBAAKC,UAAWC,IAAOC,QAAvB,UACA,uBAAMF,UAAWC,IAAOE,MAAxB,mBAAsCR,EAAtC,OACA,uBAAMK,UAAWC,IAAOE,MAAxB,sBAAyCP,EAAzC,OACA,uBAAMI,UAAWC,IAAOE,MAAxB,kBAAqCN,EAArC,OACA,uBAAMG,UAAWC,IAAOE,MAAxB,oBAAuCL,EAAvC,OACA,uBAAME,UAAWC,IAAOE,MAAxB,gCAAmDJ,EAAnD,cAMRL,EAAWU,aAAe,CACtBT,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAUTL,QCZAW,EAlBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACjB,mCACED,EAAQE,KAAI,SAACC,GAAD,OACT,wBAEAT,UAAWC,IAAOQ,OAClBC,KAAK,SACLC,KAAMF,EACNG,QAASL,EALT,SAMCE,GALIA,SCSFI,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACzB,OACE,qCACE,6BAAKA,IACJD,MCGQE,EAPI,SAAC,GAAiC,IAA/BF,EAA8B,EAA9BA,SAAUG,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KACvC,OAAO,mCAAGA,EAAO,8BAAMJ,IAAkB,4BAAIG,OCIlC,SAASE,IACpB,MAAwBC,mBAAS,GAAjC,mBAAOzB,EAAP,KAAa0B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOxB,EAAP,KAAgB0B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOvB,EAAP,KAAY0B,EAAZ,KAmBOC,EAAqB,WAExB,OADc7B,EAAOC,EAAUC,GAOnC,OACI,sBAAKG,UAAWC,IAAOwB,SAAvB,UAEJ,cAAC,EAAD,CAASV,MAAO,uBAAhB,SACI,cAAC,EAAD,CACIT,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA/BgB,SAAAmB,GACpB,OAAQA,EAAMC,OAAOhB,MACjB,IAAK,OACHU,GAAQ,SAACO,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHN,GAAW,SAACM,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHL,GAAO,SAACK,GAAD,OAAeA,EAAY,KAClC,MAEF,QACE,aAoBV,eAAC,EAAD,CAAUb,MAAO,aAAjB,UACkC,IAAzBS,KACN,cAAC,EAAD,CAAcP,QAAQ,sBACM,IAAzBO,KACG,cAAC,EAAD,CACA7B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO0B,IACPzB,mBApBM8B,KAAKC,MAAOnC,EAAK6B,IAAsB,aC3B3CO,MANf,WACE,OACE,cAACZ,EAAD,KCQWa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBChBAc,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,0BAA0B,QAAU,0BAA0B,MAAQ,wBAAwB,WAAa,6BAA6B,OAAS,4B","file":"static/js/main.9ed2d607.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../Feedback/Feedback.module.css'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage}) => {\r\n    return(\r\n        <>\r\n        <div className={styles.counter}>\r\n        <span className={styles.label}>Good: {good} </span>\r\n        <span className={styles.label}>Neutral: {neutral} </span>\r\n        <span className={styles.label}>Bad: {bad} </span>\r\n        <span className={styles.label}>Total: {total} </span>\r\n        <span className={styles.label}>Positive feedback: {positivePercentage} %</span>\r\n  \r\n        </div>\r\n        </>\r\n);\r\n};\r\nStatistics.defaultProps = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    total: 0,\r\n    positivePercentage: 0,\r\n  };\r\nStatistics.propTypes={\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number\r\n }\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../Feedback/Feedback.module.css';\r\nconst FeedbackOptions = ({ options, onLeaveFeedback})=>(\r\n       <>\r\n        {options.map((button) => (\r\n            <button \r\n            key={button}\r\n            className={styles.button}\r\n            type=\"button\"\r\n            name={button}\r\n            onClick={onLeaveFeedback}>\r\n            {button}\r\n            </button>\r\n    ))}\r\n    </>\r\n );\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  };\r\nexport default FeedbackOptions;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Old Code\r\n// const FeedbackOptions = ({ options, onLeaveFeedback})=>{\r\n//     return(\r\n//         <>\r\n//             {options.map(button =>{\r\n//         return (\r\n//             <div className={styles.all_button} key={button}>\r\n//                   <button className={styles.button} type=\"button\" onClick={onLeaveFeedback()}>{button}</button>\r\n//             </div>          \r\n//         )\r\n//         }\r\n//     )\r\n// }\r\n//         </>\r\n// );\r\n// };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children, title }) => {\r\n    return (\r\n      <>\r\n        <h1>{title}</h1>\r\n        {children}\r\n      </>\r\n    );\r\n  };\r\n    \r\n  Section.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n  }\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ children, message, show }) => {\r\n    return <>{show ? <div>{children}</div> : <p>{message}</p>}</>;\r\n  };\r\n    Notification.propTypes = {\r\n    message: PropTypes.string,  \r\n  };\r\n\r\n  export default Notification;","\r\nimport { useState} from 'react';\r\nimport styles from './Feedback.module.css';\r\nimport Statistics from '../Statistics/Statistics';\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Section from '../Section/Section';\r\nimport Notification from '../Notitfication/Notification'\r\n\r\nexport default function Feedback() {\r\n    const [good, setGood] = useState(0);\r\n    const [neutral, setNeutral] = useState(0);\r\n    const [bad, setBad] = useState(0);\r\n\r\n    const onLeaveFeedback = event => {\r\n        switch (event.target.name) {\r\n            case \"Good\":\r\n              setGood((prevState) => prevState + 1);\r\n              break;\r\n            case \"Neutral\":\r\n              setNeutral((prevState) => prevState + 1);\r\n              break;\r\n            case \"Bad\":\r\n              setBad((prevState) => prevState + 1);\r\n              break;\r\n      \r\n            default:\r\n              return;\r\n          }\r\n        };\r\n        \r\n     const countTotalFeedback = () => {\r\n        const total = good + neutral + bad;\r\n        return total;\r\n    };\r\n    const countPositiveFeedbackPercentage=()=>{\r\n            return Math.round((good/countTotalFeedback())*100);\r\n    };\r\n\r\n    return(\r\n        <div className={styles.feedback}>\r\n\r\n    <Section title={'Plese leave feedback'}>\r\n        <FeedbackOptions \r\n            options={[\"Good\", \"Neutral\", \"Bad\"]}\r\n            onLeaveFeedback={onLeaveFeedback} />\r\n    </Section>\r\n    <Section  title={'Statistics'}>\r\n            {countTotalFeedback() === 0 && (\r\n       <Notification message=\"No feedback given\"/>)}\r\n         {countTotalFeedback() !== 0 && (\r\n             <Statistics\r\n             good={good} \r\n             neutral={neutral}\r\n             bad={bad} \r\n             total={countTotalFeedback()} \r\n             positivePercentage={countPositiveFeedbackPercentage()}/>\r\n         )}\r\n           </Section>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{/* \r\nclass Feedback extends Component {\r\n    state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n     */}\r\n//   show = isShowing => {\r\n//     return isShowing;\r\n//   };\r\n\r\n//     onLeaveFeedback = event => {\r\n//     const value = event.target.textContent.toLowerCase();\r\n//     this.setState(prevState => {\r\n//         if (value === 'good') return { good: prevState[value] + 1 };\r\n//         if (value === 'neutral') return { neutral: prevState[value] + 1 };\r\n//         if (value === 'bad') return { bad: prevState[value] + 1 };\r\n//       });\r\n//     };\r\n    \r\n//     countTotalFeedback = () => {\r\n//         return Object.values(this.state).reduce((acc, value) => acc + value);\r\n//     };\r\n    \r\n//    countPositiveFeedbackPercentage=(total)=>{\r\n//         return Math.round((this.state.good/total)*100);\r\n//     };\r\n\r\n//     render(){\r\n//     const total = this.countTotalFeedback();\r\n//     const positiveFeedback=this.countPositiveFeedbackPercentage(total);\r\n//     const show = this.show(total);\r\n//         return(\r\n//         <div className={styles.feedback}>\r\n\r\n//     <Section title={'Plese leave feedback'}>\r\n//         <FeedbackOptions \r\n//             options={['Good', 'Neutral', 'Bad']}\r\n//             onLeaveFeedback={this.onLeaveFeedback} />\r\n//     </Section>\r\n\r\n//     <Section title={'Statistics'}>\r\n//         <Notification message=\"No feedback given\" show={show}>\r\n//             <Statistics\r\n//              good={this.state.good} \r\n//              neutral={this.state.neutral}\r\n//              bad={this.state.bad} \r\n//              total={total} \r\n//              positivePercentage={positiveFeedback}/>\r\n//          </Notification>\r\n//     </Section>\r\n// </div>\r\n// )\r\n// }\r\n// }\r\n\r\n// export default Feedback;","import './App.css';\nimport Feedback from './components/Feedback/Feedback'\nfunction App() {\n  return (\n    <Feedback />\n      )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback\":\"Feedback_feedback__1lsxk\",\"heading\":\"Feedback_heading__1dXyS\",\"counter\":\"Feedback_counter__H2yse\",\"label\":\"Feedback_label__1Z26r\",\"all_button\":\"Feedback_all_button__208tx\",\"button\":\"Feedback_button__2loHm\"};"],"sourceRoot":""}